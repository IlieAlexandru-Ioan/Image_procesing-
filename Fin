#include<opencv2/opencv.hpp>
#include<opencv2/core/core.hpp>
#include<opencv2/highgui/highgui.hpp>
#include <iostream>
#include<math.h>
#include<string>
using namespace std;
using namespace cv;

Mat Salt_and_pepper(Mat original) {
	Mat zgomot = original.clone();
	Mat imagine_cu_zgomot = original.clone();
	uint8_t* purici = zgomot.data;
	uint8_t* myData_s_p = imagine_cu_zgomot.data;
	for (int i = 0; i < height; i++) {
		for (int j = 0; j < width; j++) {
			purici[i * _stride + j] = rand() % 256;
		}
	}
	for (int i = 0; i < height; i++)
	{
		for (int j = 0; j < width; j++)
		{
			if (purici[i* _stride + j] > 250) {
				myData_s_p[i * _stride + j] = 255;
			}
			if (purici[i * _stride + j] < 5)
				myData_s_p[i * _stride + j] = 0;
		}
	}
	imshow("Salt&Pepper", imagine_cu_zgomot);
	return imagine_cu_zgomot;
}

Mat Filtru_median(Mat image) {
	int vecini[9];
	Mat copie = image.clone();
	uint8_t* myData_s_p = copie.data;
	uint8_t* myData_original = image.data;
	for (int i = 1; i < height - 1; i++)
	{
		for (int j = 1; j < width - 1; j++)
		{
			vecini[0] = myData_original[(i - 1)*_stride + j - 1];
			vecini[1] = myData_original[(i - 1)*_stride + j];
			vecini[2] = myData_original[(i - 1)*_stride + j + 1];
			vecini[3] = myData_original[i *_stride + j - 1];
			vecini[4] = myData_original[i *_stride + j];
			vecini[5] = myData_original[i *_stride + j + 1];
			vecini[6] = myData_original[(i + 1)*_stride + j - 1];
			vecini[7] = myData_original[(i + 1)*_stride + j];
			vecini[8] = myData_original[(i + 1)*_stride + j + 1];
			for (int v = 0; v < 8; v++) {
				for (int w = v + 1; w < 8; w++) {
					if (vecini[v] > vecini[w]) {
						int aux = vecini[v];
						vecini[v] = vecini[w];
						vecini[w] = aux;
					}
				}
			}
			myData_s_p[i * _stride + j] = vecini[4];
		}


	}
	imshow("Filtru median", copie);
	return copie;
}

Mat Filtru_gauss(Mat image, int dim, float sigma) {
	Mat gauss = image.clone();
	int height = image.rows;
	int width = image.cols;
	int _stride = image.step;
	uint8_t* original = image.data;
	uint8_t* element_gauss = gauss.data;
	float* kernel_gauss = (float*)malloc((dim) * (dim) * sizeof(float));
	int k = (dim - 1) / 2;
	for (int i = 0; i < dim; i++) {
		for (int j = 0; j < dim; j++) {
			kernel_gauss[i * (_stride)+j] = exp(-((i - k) * (i - k) + (j - k) * (j - k)) / (2 * sigma * sigma)) / (2 * 3.14 * sigma * sigma);
		}
	}
	for (int i = k; i < height - k; i++)
	{
		for (int j = k; j < width - k; j++)
		{
			float suma = 0;
			for (int z = 0; z < dim; z++) {
				for (int w = 0; w < dim; w++) {
					suma += kernel_gauss[z * _stride + w] * original[(i - k + z) * _stride + j - k + w];
				}
			}
			element_gauss[i * _stride + j] = suma;
		}
	}
	return gauss;
}

Mat Gradient_theta(Mat image) {
	Mat gradient = image.clone();
	uint8_t* element_gauss = gradient.data;
	Mat Ix = image.clone();
	Mat Iy = image.clone();
	uint8_t* myDatax = Ix.data;
	uint8_t* myDatay = Iy.data;
	Mat modul_G = image.clone();
	uint8_t* myDataG = modul_G.data;
	int height = image.rows;
	int width = image.cols;
	int _stride = image.step;
	float* theta = (float*)malloc((height) * (width) * sizeof(float));
	int k = (3 - 1) / 2;
	int Kx[3][3] = { {-1,0,1},{-2,0,2},{-1,0,1} };
	int Ky[3][3] = { {1,2,1},{0,0,0},{-1,-2,-1} };
	int X;
	int Y;
	float sum;
	for (int i = 1; i < height - 1; i++)
	{
		for (int j = 1; j < width - 1; j++) {
			X = Y = 0;
			for (int z = 0; z < 3; z++) {
				for (int w = 0; w < 3; w++) {
					X += element_gauss[(i - k + z) * _stride + j - k + w] * Kx[z][w];
					Y += element_gauss[(i - k + z) * _stride + j - k + w] * Ky[z][w];
				}
			}
			sum = sqrt(X * X + Y * Y);
			if (sum > 255) {
				sum = 255;
			}
			if (sum < 0) {
				sum = 0;
			}
			myDataG[i * _stride + j] = sum;
		}
	}

	for (int i = 0; i < height; i++) {
		for (int j = 0; j < width; j++) {
			int x = myDatax[i * _stride + j] + 1;
			int y = myDatay[i * _stride + j];
			theta[i * _stride + j] = atan(y / x) * 180 / 3.14;
			if (theta[i * _stride + j] < 0) {
				theta[i * _stride + j] += 180;
			}
		}
	}
	int max = 0;
	for (int i = 3; i < height - 3; i++) {
		for (int j = 3; j < width - 3; j++) {
			if (myDataG[i * _stride + j] > max) {
				max = myDataG[i * _stride + j];
			}
		}
	}
	return modul_G;
}

Mat Max_supr(Mat image) {
	Mat img= image.clone();
	Mat max_suppersion = image.clone();
	uint8_t* myDataSupr = max_suppersion.data;
	uint8_t* imag = img.data;
	for (int i = 0; i < height; i++) {
		for (int j = 1; j < width ; j++) {
			myDataSupr[i*_stride + j] = 0;
		}
	}
	for (int i = 1; i < height - 1; i++) {
		for (int j = 1; j < width - 1; j++) {
			int st, dr;
			if (0 <= theta[i*_stride + j] < 22.5 || 157.5 <= theta[i*_stride + j] <= 180) {
				st = imag[i*_stride + j - 1];
				dr = imag[i*_stride + j + 1];
			}
			else if (22.5 <= theta[i*_stride + j] < 67.5) {
				st = imag[(i + 1)*_stride + j - 1];
				dr = imag[(i + 1)*_stride + j + 1];
			}
			else if (67.5 <= theta[i*_stride + j] < 122.5) {
				st = imag[(i - 1)*_stride + j];
				dr = imag[(i + 1)*_stride + j];
			}
			else if (122.5 <= theta[i*_stride + j] < 157.5) {
				st = imag[(i - 1)*_stride + j - 1];
				dr = imag[(i + 1)*_stride + j + 1];
			}
			if (imag[i *_stride + j] >= st && imag[i *_stride + j] >= dr) 
				myDataSupr[i*_stride + j] = imag[i*_stride + j];
			else
				myDataSupr[i*_stride + j] = 0;
		}
	}
	imshow("Suppression", max_suppersion);
	return max_suppersion;
}

Mat Double_thrs(Mat image) {
	Mat res = image.clone();
	uint8_t* rez = res.data;
	uint8_t* myDataSupr = image.data;
	float lowtreshholdratio = 0.05, hightreshholdratio = 0.09;
	float hightreshhold, lowtreshhold;
	uint8_t weak = 25, strong = 255;
	int max = 0;
	for (int i = 0; i < height; i++) {
		for (int j = 1; j < width; j++) {
			rez[i*_stride + j] = 0;
		}
	}
	for (int i = 0; i < height; i++) {
		for (int j = 0; j < width; j++) {
			if (myDataSupr[i * _stride + j] > max)
				max = myDataSupr[i * _stride + j];
		}
	}
	hightreshhold = max * hightreshholdratio;
	lowtreshhold = hightreshhold * lowtreshholdratio;
	for (int i = 0; i < height; i++) {
		for (int j = 0; j < width; j++) {
			rez[i * _stride + j] = 0;
		}
	}
	for (int i = 0; i < height; i++) {
		for (int j = 0; j < width; j++) {
			if (myDataSupr[i * _stride + j] > hightreshhold)
				rez[i * _stride + j] = strong;
			else
				if (myDataSupr[i * _stride + j] < hightreshhold && myDataSupr[i * _stride + j] > lowtreshhold)
					rez[i * _stride + j] = weak;
		}
	}
	imshow("res", res);
	return res;
}

Mat Edge_tracking(Mat image) {
	Mat histerezis = image.clone();
	Mat max_suppersion = image.clone();
	int weak = 25;
	int strong = 255;
	uint8_t*h_data = histerezis.data;
	for (int i = 1; i < height-1; i++) {
		for (int j = 1; j < width-1; j++) {
			if (h_data[i*_stride + j] == weak) {
				if (h_data[(i + 1)*_stride + j - 1] == strong || h_data[(i + 1)*_stride + j] == strong || h_data[(i + 1)*_stride + j + 1] == strong || h_data[(i)*_stride + j - 1] == strong || h_data[(i)*_stride + j+1] == strong || h_data[(i-1)*_stride + j - 1] == strong || h_data[(i - 1)*_stride + j ] == strong || h_data[(i - 1)*_stride + j+1])
					h_data[i*_stride + j] = strong;
			}
			else
				h_data[i*_stride + j] = 0;
		}
	}
	imshow("final", histerezis);
	return histerezis;
}

int main()
{
	Mat imagine_curenta;
	Mat imagine_prelucrata;
	int n,nr_linii_kernel;
	float sigma;
	string nume_imagine;
	while (1) {
		cout << "Apasa 0 pentru a citi imaginea\n";
		cout << "Apasa 1 pentru a adauga zgomot sare si piper pe imagine\n";
		cout << "Apasa 2 pentru a aplica filtru median pe imagine\n";
		cout << "Apasa 3 pentru a aplica un filtru gaussian pe imagine\n";
		cout << "Apasa 4 pentru a aplica un canny edge detector\n";
		cout << "Apasa 5 pentru a afisa imaginea \n";
		cout << "Apasa 6 pentru a iesi din aplicatie\n";
		cin >> n;
		switch (n)
		{
		case 0:
			cin >> nume_imagine;
			imagine_curenta = imread(nume_imagine, CV_8UC1);
			break;
		case 1:
			imagine_curenta = Salt_and_pepper(imagine_curenta);
			break;
		case 2:
			imagine_curenta = Filtru_median(imagine_curenta);
			break;
		case 3:
			cout << "Introdu numarul de linii si coloane al kernelului\n";
			cin >> nr_linii_kernel;
			cout << "Introdu valoarea lui sigma\n";
			cin >> sigma;
			imagine_curenta = Filtru_gauss(imagine_curenta,nr_linii_kernel,sigma);
			break;
		case 4:
			imagine_curenta = Gradient_theta(imagine_curenta);
			imagine_curenta = Max_supr(imagine_curenta);
			imagine_curenta = Double_thrs(imagine_curenta);
			imagine_curenta = Edge_tracking(imagine_curenta);
			break;

		case 5:
			imshow("imagine afisata", imagine_curenta);
			waitKey(0);
			break;
		case 6:
			exit(0);
			break;
		default:
			break;
		}
	}
}
